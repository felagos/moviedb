name: moviedb

on:
    push:
        branches: [ master ]

jobs:
  setup-app:
    runs-on: ubuntu-latest
    name: setup-app
    steps:
      - uses: actions/checkout@v2

      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('yarn.lock') }}

      - name: Cache Cypress
        id: cache-cypress
        uses: actions/cache@v1
        with:
          path: cypress/cache
          key: cypress-binary-${{ hashFiles('yarn.lock') }}

      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: '14'

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          yarn

  test-app-unit:
    runs-on: ubuntu-latest
    needs: setup-app
    name: test-app-unit
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: '14'

      - name: Restore node_modules from cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('yarn.lock') }}

      - name: Test app
        run: yarn test
        env:
          REACT_APP_API_KEY: ${{ secrets.REACT_APP_API_KEY }}
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

  test-app-e2e:
    runs-on: ubuntu-latest
    needs: setup-app
    name: test-app-e2e
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: '14'

      - name: Restore node_modules from cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('yarn.lock') }}

      - name: Restore cypress from cache
        uses: actions/cache@v1
        with:
          path: .cache/Cypress
          key: cypress-binary-${{ hashFiles('yarn.lock') }}
      
      - name: Install Cypress
        run: npx cypress install

      - name: Test E2E
        run: yarn e2e:ci
        env:
          REACT_APP_API_KEY: ${{ secrets.REACT_APP_API_KEY }}
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

  deploy-app:
    runs-on: ubuntu-latest
    needs: [test-app-unit, test-app-e2e]
    steps:
        - uses: actions/checkout@v2
        - name: Set Env Vars on Vercel Project
          uses: dkershner6/vercel-set-env-action@v1
          with:
            token: ${{ secrets.VERCEL_TOKEN }}
            teamId: ${{ secrets.VERCEL_TEAM_ID }}
            projectName: moviedb
            envVariableKeys: REACT_APP_API_URL,REACT_APP_API_KEY
          env:
              REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
              TARGET_REACT_APP_API_URL: preview,development,production
              TYPE_REACT_APP_API_URL: plain

              REACT_APP_API_KEY: ${{ secrets.REACT_APP_API_KEY }}
              TARGET_REACT_APP_API_KEY: preview,development,production
              TYPE_REACT_APP_API_KEY: plain
        - name: deploy site to vercel
          uses: amondnet/vercel-action@v20
          with:
            vercel-token: ${{ secrets.VERCEL_TOKEN }} # Required
            github-token: ${{ secrets.GITHUB_TOKEN }} #Optional
            vercel-args: '--prod' #Optional
            vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}  #Required
            vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}} #Required
